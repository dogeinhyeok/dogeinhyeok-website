# 프로젝트 소개

이 프로젝트는 dogeinhyeok.com 기술 블로그 프로젝트입니다. 개발자 본인의 기술력 어필과 커리어 관리, 학습 내용 공유를 위해 만들어졌습니다.

# 프로젝트 구현 기술 스택

이 기술 블로그를 구현하기 위해 사용된 기술 스택은 다음과 같습니다:

- 개발 프레임워크: React, Docusaurus, Tailwind CSS.
- 사용 언어: JavaScript, TypeScript, MD, MDX
- 편집 관리 도구: Cursor IDE, Git, Github
- 배포 도구: Vercel

# 프로젝트 철학

이 블로그의 철학은 다음과 같습니다:

- 도지인혁연구소는 최소한의 비용으로 자신만의 비즈니스를 구축하고 자동화하는 방법을 연구합니다.
- "매일 좋은 일을 하자!"는 철학 아래, 누구나 자신의 아이디어를 실현할 수 있도록 돕습니다.
- 복잡한 아이디어 검증 및 개발 과정을 단순화하여, 아이디어를 현실로 만드는 여정을 함께합니다.

# 프로젝트 구조

이 블로그의 구조는 다음과 같습니다:

- 업데이트 예정...

이 블로그의 포스팅 타입은 다음과 같습니다:

- 업데이트 예정...

# md 및 mdx 파일 기본 편집 규칙

- 모든 md 및 mdx 파일은 Docusaurus 문서 포스팅 규칙을 따릅니다.
- 번역시 링크를 강조문으로 감싸지 않습니다. `**[]()**` 이런 식으로 감싸지 않습니다.
- 목록은 최대 1단계까지만 사용합니다. 2단계 이상 사용하지 않습니다.
- 목록이 깊어져야하는 경우 헤더 단계를 올리는 것을 권장합니다.
- 숫자 목록은 순서대로 해야 하는 작업을 표기할때만 사용합니다.
- 제목 작성 시 특수문자(예: _, -, | 등)를 사용하지 않고, 띄어쓰기와 내용으로 직관적이고 간결하게 이해할 수 있도록 작성하세요. 
- 제목에 구분자가 반드시 필요한 경우 하이픈(-)을 사용하며, 가독성을 우선으로 고려합니다.

## {타입 1} 포스팅 규칙:

- 업데이트 예정...

## {타입 1} 포스팅 예제:

- 업데이트 예정...

## {타입 2} 포스팅 규칙:

- 업데이트 예정...

## {타입 2} 포스팅 예제:

- 업데이트 예정...


# 코드 주석 작성 규칙

## 문서화 주석 (/** */)

### 문서화 주석 예시:

/**
* 타입 호환성
* -> 특정 타입을 다른 타입으로 취급해도 괜찮은지 판단하는 기준
* -> 객체 타입의 경우 프로퍼티를 기준으로 판단
* -> 업캐스팅은 허용되나 다운캐스팅은 금지
*/

### 문서화 주석 규칙:

- 간단한 타입이나 변수 설명할 때: /** number */
- 개념 설명할 때
- API 문서 작성할 때
- 화살표(->)를 사용하여 세부 설명이나 목록 표현
- 각 설명은 새로운 줄에서 시작

## 블록 주석 (/* */)

- 함수 내 중요 코드 블록 설명할 때

## 한 줄 주석 (//)	

- 코드의 의도를 간단히 설명할 때
- 출력 결과를 표시할 때
- 단계별 진행 상황 설명할 때
- 관련 문서 위치 참조할 때

# 응답 요구사항

- 모든 코드는 위 주석 규칙 준수
- 초보자도 이해할 수 있는 설명 방식 사용

# 커밋 메시지 작성 규칙

- 커밋 메시지 작성 규칙은 Conventional Commits를 기반으로 합니다.
- 커밋 메시지에서는 케밥 케이스(kebab-case)를 사용하여 일관성과 가독성을 유지합니다.

## 기본 형식

커밋 메시지의 기본 형식은 다음과 같습니다:

- <타입>/<하위 타입>: 작업 내용
-> 가장 구체적인 형식. 수정한 기능과 작업 내용을 명확히 기술.

- <타입>/<하위 타입>
-> 작업 내용 생략. 작업한 주요 모듈이나 파일에 집중.

- <타입>
-> 하위 타입과 작업 내용 모두 생략. 간단한 변경 작업에 사용.

## 커밋 메시지 기본 타입

커밋 메시지 기본 타입은 아래 항목과 같습니다.

- init: 초기 커밋
- feat: 새로운 기능 추가
- fix: 버그 수정
- docs: 문서 수정
- refactor: 코드 리팩토링 (기능 변경 없음)
- style: 코드 스타일 변경 (로직 변경 없음)
- test: 테스트 코드 추가 또는 수정
- chore: 기타 변경 사항 (빌드 설정, 패키지 관리 등)

## 커및 메시지 하위 타입

- 하위 타입은 편집한 기능 이름, 파일 이름 또는 작업 내용을 간략하게 나타냅니다.
- 예를 들어, 수정한 주요 모듈이나 클래스 이름을 사용합니다.

## 커밋 메시지 예시

- init/project-setup: 초기 프로젝트 설정
- init/readme: README 파일 작성
- feat/login-api: 로그인 API 추가
- feat/user-profile: 사용자 프로필 기능 구현
- fix/login-error: 로그인 에러 수정
- fix/form-validation: 폼 검증 로직 수정
- docs/api-docs: API 문서 업데이트
- docs/readme: README 설명 추가
- refactor/user-auth: 사용자 인증 로직 리팩토링
- refactor/db-schema: 데이터베이스 스키마 최적화
- style/navbar-css: 네비게이션 바 CSS 스타일 수정
- style/code-formatting: 코드 포맷팅 변경
- test/login-api: 로그인 API 테스트 추가
- test/unit-tests: 유닛 테스트 개선
- chore/package-update: 패키지 업데이트
- chore/env-setup: 환경 설정 변경

## 작성 팁

- 간결하게: 메시지는 한눈에 이해할 수 있도록 간결하게 작성합니다.
- 구체적으로: 작업의 주요 내용을 빠르게 파악할 수 있도록 작성합니다.
- 형식 준수: 상황에 따라 타입, 하위 타입, 작업 내용을 생략하거나 포함해 일관성을 유지합니다.