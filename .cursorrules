# 프로젝트 소개

이 프로젝트는 dogeinhyeok.com 기술 블로그 프로젝트입니다. 개발자 본인의 기술력 어필과 커리어 관리, 학습 내용 공유를 위해 만들어졌습니다.

# 블로그 구현 기술 스택

- 개발 프레임워크: React, Docusaurus, Tailwind CSS.
- 사용 언어: JavaScript, TypeScript, MD, MDX.
- 편집 관리 도구: Cursor IDE, Git, Github.
- 배포 도구: Vercel.

# 블로그 철학

1. 비용 효율적 비즈니스 구축: 최소한의 비용으로 자신만의 비즈니스를 구축하고 자동화하는 방법을 연구합니다.
2. 지속 가능한 성장과 협력: "매일 좋은 일을 하자!"는 철학 아래, 함께 성장하며 협력합니다.
3. 아이디어를 현실로: 복잡한 아이디어를 단순화하고, 아이디어를 현실로 만드는 여정을 함께합니다.

# 블로그 콘텐츠 작성 철학

- 최대한 쉽고 간결하면서 핵심 내용을 전달하는 것을 목표로 합니다.
- 모든 콘텐츠는 초보자도 이해할 수 있도록 작성합니다.
- 유행에 따라 사라질 어휘는 사용하지 않습니다.
- 공식적이고 격식을 차린 문체인 "합니다체"를 항상 사용하여, 독자에게 명확하고 신뢰성 있는 정보를 제공합니다.

# md 및 mdx 파일 기본 편집 규칙

- 모든 md 및 mdx 파일은 Docusaurus 문서 포스팅 규칙을 따릅니다.
- 번역시 링크를 강조문으로 감싸지 않습니다. `**[]()**` 이런 식으로 감싸지 않습니다.
- 목록은 최대 1단계까지만 사용합니다. 2단계 이상 사용하지 않습니다.
- 목록이 깊어져야하는 경우 헤더 단계를 올리는 것을 권장합니다.
- 숫자 목록은 순서대로 해야 하는 작업을 표기할때만 사용합니다.
- 제목 작성 시 특수문자(예: _, -, | 등)를 사용하지 않고, 띄어쓰기와 내용으로 직관적이고 간결하게 이해할 수 있도록 작성하세요. 
- 제목에 구분자가 반드시 필요한 경우 하이픈(-)을 사용하며, 가독성을 우선으로 고려합니다.

# 블로그 구조

이 블로그는 문서와 블로그 포스팅 페이지로 구성되어 있습니다.

## 문서 페이지

문서 페이지는 시간보다는 정보 구조화를 중요하게 생각합니다. 객관적인 정보를 제공하는 것을 중요하게 생각합니다.

## 블로그 페이지

블로그는 정보 구조화 보다는 시간 순서를 중요하게 생각합니다. 주관적인 정보를 제공하는 것을 중요하게 생각합니다.

# 포스팅 타입

## Blog

- 리서치 리포트 문서
- 프로젝트 예제 문서

## Document

- 기술 소개 문서
- 기술 튜토리얼 문서
- 기술 선택 가이드 문서

# 코드 주석 작성 규칙

## 문서화 주석 (/** */)

### 문서화 주석 예시:

/**
* 타입 호환성
* -> 특정 타입을 다른 타입으로 취급해도 괜찮은지 판단하는 기준
* -> 객체 타입의 경우 프로퍼티를 기준으로 판단
* -> 업캐스팅은 허용되나 다운캐스팅은 금지
*/

### 문서화 주석 규칙:

- 간단한 타입이나 변수 설명할 때: /** number */
- 개념 설명할 때
- API 문서 작성할 때
- 화살표(->)를 사용하여 세부 설명이나 목록 표현
- 각 설명은 새로운 줄에서 시작

## 블록 주석 (/* */)

- 함수 내 중요 코드 블록 설명할 때

## 한 줄 주석 (//)	

- 코드의 의도를 간단히 설명할 때
- 출력 결과를 표시할 때
- 단계별 진행 상황 설명할 때
- 관련 문서 위치 참조할 때

# 응답 요구사항

- 모든 코드는 위 주석 규칙 준수
- 초보자도 이해할 수 있는 설명 방식 사용

# 커밋 메시지 작성 규칙

- 커밋 메시지 작성 규칙은 Conventional Commits를 기반으로 합니다.
- 커밋 메시지에서는 케밥 케이스(kebab-case)를 사용하여 일관성과 가독성을 유지합니다.

## 기본 형식

커밋 메시지의 기본 형식은 다음과 같습니다:

- <타입>/<하위 타입>: 작업 내용
-> 가장 구체적인 형식. 수정한 기능과 작업 내용을 명확히 기술.

- <타입>/<하위 타입>
-> 작업 내용 생략. 작업한 주요 모듈이나 파일에 집중.

- <타입>
-> 하위 타입과 작업 내용 모두 생략. 간단한 변경 작업에 사용.

## 커밋 메시지 기본 타입

커밋 메시지 기본 타입은 아래 항목과 같습니다.

- init: 초기 커밋
- feat: 새로운 기능 추가
- fix: 버그 수정
- docs: 문서 수정
- refactor: 코드 리팩토링 (기능 변경 없음)
- style: 코드 스타일 변경 (로직 변경 없음)
- test: 테스트 코드 추가 또는 수정
- chore: 기타 변경 사항 (빌드 설정, 패키지 관리 등)

## 커및 메시지 하위 타입

- 하위 타입은 편집한 기능 이름, 파일 이름 또는 작업 내용을 간략하게 나타냅니다.
- 예를 들어, 수정한 주요 모듈이나 클래스 이름을 사용합니다.

## 커밋 메시지 예시

- init/project-setup: 초기 프로젝트 설정
- init/readme: README 파일 작성
- feat/login-api: 로그인 API 추가
- feat/user-profile: 사용자 프로필 기능 구현
- fix/login-error: 로그인 에러 수정
- fix/form-validation: 폼 검증 로직 수정
- docs/api-docs: API 문서 업데이트
- docs/readme: README 설명 추가
- refactor/user-auth: 사용자 인증 로직 리팩토링
- refactor/db-schema: 데이터베이스 스키마 최적화
- style/navbar-css: 네비게이션 바 CSS 스타일 수정
- style/code-formatting: 코드 포맷팅 변경
- test/login-api: 로그인 API 테스트 추가
- test/unit-tests: 유닛 테스트 개선
- chore/package-update: 패키지 업데이트
- chore/env-setup: 환경 설정 변경

## 작성 팁

- 간결하게: 메시지는 한눈에 이해할 수 있도록 간결하게 작성합니다.
- 구체적으로: 작업의 주요 내용을 빠르게 파악할 수 있도록 작성합니다.
- 형식 준수: 상황에 따라 타입, 하위 타입, 작업 내용을 생략하거나 포함해 일관성을 유지합니다.

# 문서 목차

현재 블로그에서 사용하는 문서 목차는 다음과 같습니다.

### 아이디어 관리 도구

#### ChatGPT

- 용도: 콘텐츠 작성 및 브레인스토밍.
- 예: 블로그 초안 작성, 코드 생성, 질문 답변.

#### Perplexity

- 용도: 검색 기반 정보 제공 및 AI 답변.
- 예: 빠른 정보 탐색, 연구 보조.

#### Sider
- 용도: 브라우저 검색 어시스트로 웹페이지 읽기와 쓰기를 지원.
- 예: 실시간 웹페이지 번역, 유튜브 자막 번역, 검색 결과 요약.

#### Notion

- 용도: 개인 생산성 도구.
- 예: 아이디어 정리, 목표 설정, 학습 계획 관리.

#### Google Sheet

- 용도: 데이터 정리 및 협업.
- 예: 데이터 정리, 작업 일정 관리, 예산 계획.

#### Napkin AI

- 용도: 아이디어 시각화 및 메모 관리
- 예: 생각 정리, 창의적 브레인스토밍

#### Gamma

- 용도: 슬라이드, 문서, 웹 페이지 생성
- 예: 인터랙티브 문서 제작, 프레젠테이션

#### Figma

- 용도: 디자인 협업 및 프로토타이핑
- 예: UI/UX 설계, 와이어프레임 제작

#### Adobe Express

- 용도: 빠른 그래픽 디자인 및 비디오 편집
- 예: 소셜 미디어 포스트 제작, 간단한 마케팅 자료 디자인

#### Capcut

- 용도: 비디오 편집 및 제작
- 예: 소셜 미디어용 짧은 영상 제작, 모바일 기반 비디오 편집

#### v0.dev

- 용도: AI 기반 웹사이트 개발
- 예: 생성형 웹 애플리케이션

### 협업 관리 도구

#### Discord

- 용도: 외부 커뮤니티 관리 및 비공식 커뮤니케이션.
- 예: 커뮤니티 Q&A, 음성 회의, 이벤트 진행.

#### Zoom

- 용도: 내부 팀 화상 회의 및 웨비나 진행.
- 예: 팀 회의, 원격 프레젠테이션, 교육 세션.

#### Slack

- 용도: 실시간 내부 소통 및 알림 관리.
- 예: 프로젝트 알림, 파일 공유, 채팅.

#### ClickUp

- 용도: 프로젝트, 작업, 협업 및 HR 관리를 위한 올인원 도구.
- 예: 작업 및 프로젝트 관리, 목표 설정, 근태 기록, 팀 협업.

#### Github

- 용도: 코드 저장 및 버전 관리.
- 예: 소스 코드 관리, 협업 리포지토리 운영.

#### Google Workspace

- 용도: 메일과 파일 관리 중심 도구.
- 예: Gmail, Drive, Docs, Slides, Forms로 문서 작업 및 공유.

#### Make

- 용도: 여러 도구를 연결해 자동화 워크플로우 구성.
- 예: 도구 간 데이터 동기화 및 알림 자동화.

### 기본 개발 도구

#### Cursor IDE

- 용도: AI 통합 프로그래밍 환경으로 코드 생산성 향상
- 예: 코드 작성, 디버깅

#### Git

- 용도: 코드 버전 관리.
- 예: 프로젝트 협업 버전 관리.

#### SourceTree

- 용도: Git 작업을 GUI로 시각화.
- 예: Git 워크플로 관리.

### 웹앱 개발 도구

#### JavaScript

- 용도: 웹 개발의 표준 언어로 프론트엔드와 백엔드 모두 지원
- 예: 웹사이트 인터랙션, API 통신

#### TypeScript

- 용도: 타입 안정성을 제공하는 JavaScript 확장 언어
- 예: 대규모 프로젝트 관리

#### React

- 용도: 컴포넌트 기반 UI 개발
- 예: SPA 개발, UI 모듈

#### Next.js

- 용도: 서버사이드 렌더링 및 정적 사이트 생성 지원
- 예: SEO 최적화 웹사이트 개발

#### Tailwind CSS

- 용도: 유틸리티 기반 CSS 프레임워크
- 예: 빠른 스타일링

#### shadcn/ui

- 용도: 스타일링된 React 컴포넌트 라이브러리
- 예: UI 구축

#### Vercel

- 용도: Next.js 배포와 정적 콘텐츠 호스팅
- 예: 정적 사이트 배포

#### React Native

- 용도: 크로스 플랫폼 모바일 앱 개발
- 예: iOS/Android 앱 개발

#### Electron

- 용도: 데스크톱 애플리케이션 개발
- 예: 데스크톱 앱

### 웹앱 개발 도구 추가

#### Docusaurus

- 용도: 외부 공개용 기술 블로그와 제품 설명서
- 예: 브랜드 사이트, 공개 문서

#### OpenAI Platform

- 용도: AI 모델 통합 및 텍스트, 이미지 생성
- 예: 텍스트 자동화

#### Patreon API

- 용도: 구독 기반 회원 관리 및 데이터 통합
- 예: 구독 기반 회원 관리, 데이터 통합, 커스텀 VIP 멤버십 서비스.

#### Web3.js

- 용도: 블록체인 상호작용 및 스마트 계약 호출
- 예: 스마트 계약 호출, NFT 생성 및 관리, 암호화폐 지갑 연동.

#### React Unity WebGL

- 용도: React와 Unity 통합으로 3D 앱 개발
- 예: 3D 웹게임.

### 데이터 사이언스 개발 도구

#### Python

- 용도: 데이터 분석, 머신러닝, 웹 개발
- 예: 데이터 파이프라인 구축 및 데이터 분석.

#### SQL

- 용도: 데이터베이스 관리 및 쿼리
- 예: 데이터 검색, 관계형 데이터 관리.

#### Firebase

- 용도: NoSQL 기반 데이터베이스 관리
- 예: 실시간 채팅 애플리케이션, 간단한 MVP 개발.

#### Supabase

- 용도: SQL 기반 데이터베이스 관리
- 예: 데이터 중심 웹 애플리케이션 구축.

#### FastAPI

- 용도: 고성능 Python 기반 웹 API
- 예: RESTful API 구축 및 데이터 처리.

#### Pandas

- 용도: 데이터 분석 및 처리
- 예: 데이터 정리 및 시각화.

### 데이터 사이언스 개발 도구 추가

#### LangChain

- 용도: LLM 기반 애플리케이션 개발 프레임워크
- 예: 맞춤형 챗봇 개발, AI 기반 문서 분석 시스템 구축

#### Matplotlib

- 용도: 데이터 시각화 라이브러리
- 예: 통계 그래프 생성, 과학적 플롯 작성

#### Seaborn

- 용도: 통계적 데이터 시각화
- 예: 복잡한 데이터셋의 히트맵 생성, 회귀 분석 결과 시각화

### 그래픽스 개발 도구

#### C#

- 용도: Unity 엔진의 주요 스크립팅 언어
- 예: 게임 로직 구현

#### Shader

- 용도: 3D 렌더링 효과 및 그래픽 제어
- 예: 특수 효과

#### Unity

- 용도: 게임, VR/AR 콘텐츠 제작 엔진
- 예: 3D 게임 개발, 가상 환경 AI 시뮬레이션

### 그래픽스 개발 도구 추가

#### Unity ML-Agents

- 용도: Unity 기반 강화학습 지원.
- 예: AI 에이전트 시뮬레이션, 가상 환경 강화학습, 자율주행 테스트.

### 로보틱스 개발 도구

#### Raspberry Pi

- 용도: IoT 프로젝트 및 로봇 제어.
- 예: 로봇 제어, 기계적 모델링.

#### LEGO Technic

- 용도: 기계적 모델링을 위한 모듈형 조립 시스템
- 예: 로보틱스 프로토타이핑, Raspberry Pi와 연계한 기계적 모델링.

#### 3d Printer

- 용도: 맞춤형 하드웨어 제작.
- 예: 맞춤형 로봇 부품 설계, LEGO Technic과 결합한 프로토타이핑, 기판 및 회로 결합부 제작.
